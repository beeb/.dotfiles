local wezterm = require 'wezterm'
local act = wezterm.action
local config = {}

if wezterm.config_builder then
    config = wezterm.config_builder()
end

-- Show which key table is active in the status area
wezterm.on('update-right-status', function(window, pane)
  local name = window:active_key_table()
  if name then
    name = 'TABLE: ' .. name
  end
  window:set_right_status(name or '')
end)

config.color_scheme = 'Catppuccin Mocha'
config.font = wezterm.font {
    {{#if (eq dotter.os "windows")}}
    family = 'JetBrainsMono NFM',
    {{else}}
    family = 'JetBrainsMono Nerd Font',
    {{/if}}
    weight = 'Light'
}
{{#if (eq dotter.os "windows")}}
config.font_size = 12
{{else}}
config.font_size = 13
{{/if}}
config.cell_width = 0.9
{{#if (eq dotter.os "windows")}}
config.default_domain = 'WSL:Ubuntu'
{{/if}}
config.window_close_confirmation = 'NeverPrompt'

config.keys = {
    -- C-p ot enter pane mode
    { key = 'p', mods = 'CTRL', action = act.ActivateKeyTable { name = 'pane', one_shot = true } },
    -- C-n to enter pane resize mode
    { key = 'n', mods = 'CTRL', action = act.ActivateKeyTable { name = 'resize_pane', one_shot = false } },
    -- Move around panes with Alt (can also be done in C-p pane mode)
    { key = 'LeftArrow', mods = 'ALT', action = act.ActivatePaneDirection 'Left' },
    { key = 'h', mods = 'ALT', action = act.ActivatePaneDirection 'Left' },
    { key = 'RightArrow', mods = 'ALT', action = act.ActivatePaneDirection 'Right' },
    { key = 'l', mods = 'ALT', action = act.ActivatePaneDirection 'Right' },
    { key = 'UpArrow', mods = 'ALT', action = act.ActivatePaneDirection 'Up' },
    { key = 'k', mods = 'ALT', action = act.ActivatePaneDirection 'Up' },
    { key = 'DownArrow', mods = 'ALT', action = act.ActivatePaneDirection 'Down' },
    { key = 'j', mods = 'ALT', action = act.ActivatePaneDirection 'Down' },
    -- Paste
    { key = 'v', mods = 'CTRL', action = act.PasteFrom 'Clipboard' },
}

config.key_tables = {
    pane = {
        -- Pane split and close
        { key = 'r', action = act.SplitHorizontal { domain = 'CurrentPaneDomain' } },
        { key = 'd', action = act.SplitVertical { domain = 'CurrentPaneDomain' } },
        { key = 'x', action = act.CloseCurrentPane { confirm = false } },
        -- Move around
        { key = 'h', action = act.ActivatePaneDirection 'Left' },
        { key = 'l', action = act.ActivatePaneDirection 'Right' },
        { key = 'k', action = act.ActivatePaneDirection 'Up' },
        { key = 'j', action = act.ActivatePaneDirection 'Down' },

        { key = 'Escape', action = 'PopKeyTable' },
    },
    resize_pane = {
        { key = 'LeftArrow', action = act.AdjustPaneSize { 'Left', 4 } },
        { key = 'h', action = act.AdjustPaneSize { 'Left', 4 } },
        { key = 'RightArrow', action = act.AdjustPaneSize { 'Right', 4 } },
        { key = 'l', action = act.AdjustPaneSize { 'Right', 4 } },
        { key = 'UpArrow', action = act.AdjustPaneSize { 'Up', 4 } },
        { key = 'k', action = act.AdjustPaneSize { 'Up', 4 } },
        { key = 'DownArrow', action = act.AdjustPaneSize { 'Down', 4 } },
        { key = 'j', action = act.AdjustPaneSize { 'Down', 4 } },

        { key = 'Escape', action = 'PopKeyTable' },
    }
}

return config